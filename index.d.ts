/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum VcpValueType {
  Continuous = 0,
  NonContinuous = 1,
  Table = 2,
}
export interface Continuous {
  currentValue: number
  maximumValue: number
  type: VcpValueType.Continuous
}
export interface NonContinuous {
  currentValue: number
  currentValueRepresentation?: string
  possibleValues: Record<string, string | undefined | null>
  type: VcpValueType.NonContinuous
}
export interface Table {
  currentData: Array<number>
  type: VcpValueType.Table
}
export const enum JsQueryType {
  Backend = 0,
  Id = 1,
  ManufacturerId = 2,
  ModelName = 3,
  SerialNumber = 4,
}
export interface Query {
  queryType: JsQueryType
  queryValue: string
}
export type JsDisplay = Display
export class Display {
  index: number
  backend: string
  edidData?: Uint8Array
  version?: string
  mccsVersion?: string
  displayId: string
  serial?: number
  serialNumber?: string
  modelId?: number
  modelName?: string
  manufacturerId?: string
  manufactureYear?: number
  manufactureWeek?: number
  capabilities?: string
  constructor(index: number)
  getVcpFeature(featureCode: number): Promise<Continuous | NonContinuous | Table>
  setVcpFeature(featureCode: number, valueOrOffset: number, bytes?: Array<number> | undefined | null): Promise<void>
}
export type JsDisplayManager = DisplayManager
export class DisplayManager {
  constructor(queries?: Query | Array<Query> | undefined | null)
  static getByIndex(index: number): Display
  get queries(): Array<Query>
  set queries(queries: Array<Query>)
  addQueries(queries?: Query | Array<Query> | undefined | null): void
  collect(): Array<Display>
  list(): Array<Display>
}
